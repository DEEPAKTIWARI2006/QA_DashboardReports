response = given()
				.auth().preemptive().basic("chrisgale2020@gmail.com", "chrisgayle2020")
				.when().get("http://192.168.56.103:8080/rest/api/latest/issue/AUT-35").then().extract().response().asString();
		
		System.out.println("Custom Field value is " + from(response).getString("fields.labels"));
		
		 response = given()
				.auth().preemptive().basic("chrisgale2020@gmail.com", "chrisgayle2020")
				.when().get("http://192.168.56.103:8080/rest/api/latest/issue/createmeta?projectKeys=AUT&expand=projects.issuetypes.fields").then().extract().response().asString();
		
		List<String> IssueTypelist = from(response).getList("projects.issuetypes.fields.customfield_10201.name");
		System.out.println("Custom Field value is " + IssueTypelist);
		

		List<String> ListSubTasksSummary = from(response).getList("fields.subtasks.fields.summary");
		System.out.println("SubTasks Summary for this issue is "  + ListSubTasksSummary);
		
		List<String> ListSubTasksIssueType = from(response).getList("fields.subtasks.fields.issuetype.name");
		System.out.println("Issue Type for SubTasks is "  + ListSubTasksIssueType);
		
		List<String> ListSubTasksIssuePriority = from(response).getList("fields.subtasks.fields.priority.name");
		System.out.println("Issue Type for SubTasks is "  + ListSubTasksIssuePriority);
		
		response = given()
				.auth().preemptive().basic("chrisgale2020@gmail.com", "chrisgayle2020")
				.when().get("http://192.168.56.103:8080/rest/api/latest/issue/AUT-36?expand").then().extract().response().asString();
		
		System.out.println("Custom Field value is " + from(response).getString("fields.customfield_10201.value"));
		
		Collection< String > lines = new ArrayList< String >();
		lines.add("abcd");
		File htmlTemplateFile = new File(System.getProperty("user.dir") + "/DashBoardReports/.html");
		FileUtils.writeLines(htmlTemplateFile, lines);
		
		
		
			public static void CreateComponentPriorityDefectMap() {
		Set keySet = new HashSet();
		keySet = componenDefectMap.keySet();
	    Iterator keyIterator = keySet.iterator();
	    while (keyIterator.hasNext() ) {
	        String component = (String) keyIterator.next();
	        List<String> defects = (List<String>) componenDefectMap.get(component);
	        Multimap<String,String> tempDefectPriorityMap = ArrayListMultimap.create();
	       for(String defectID: defects) {
	    	   String tempresponse  = given().spec(requestSpec).when().get(baseURI + "/rest/api/latest/issue/" + defectID + "?fields=priority").then().extract().response().asString();
	    	   String priority= from(tempresponse).getString("fields.priority.name");
	    	   tempDefectPriorityMap.put(priority, defectID);
	       }
	    }
	}
	
	
	public static void CreateMapForCompomentPriority() {
		for(String defect: defectList) {
			String tempresponse  = given().spec(requestSpec).when().get(baseURI + "/rest/api/latest/issue/" + defect + "?fields=priority&fields=components").then().extract().response().asString();
			List<String> components= from(tempresponse).getList("fields.components.name");
			
			
		}
	}
		
		
			        	parentLabels = null;
	        	parentLabels = GetParentLabel(response);
        		if(null!=parentLabels)
        			for(String parentlabel:parentLabels)
        				labelTestCaseMap.put(parentlabel, issue);
        		else
        			labelTestCaseMap.put(label, issue);
        			
        			
        			
        			
        			public static List<String> GetParentLabel(String response) {
		String ParentKeyID = from(response).getString("fields.parent.key");
		String tempresponse  = given().spec(requestSpec).when().get(baseURI + "/rest/api/latest/issue/" + ParentKeyID + "?fields=labels").then().extract().response().asString();
		if(null!=from(tempresponse).getList("fields.labels"))
			return from(tempresponse).getList("fields.labels");
		else 
			return null;
	}